"""
Remove Palindromic Subsequences
Given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.

Return the minimum number of steps to make the given string empty.

A string is a subsequence of a given string, if it is generated by deleting some characters of a given string without changing its order.

A string is called palindrome if is one that reads the same backward as well as forward.



Example 1:

Input: s = "ababa"
Output: 1
Explanation: String is already palindrome
Example 2:

Input: s = "abb"
Output: 2
Explanation: "abb" -> "bb" -> "".
Remove palindromic subsequence "a" then "bb".
Example 3:

Input: s = "baabb"
Output: 2
Explanation: "baabb" -> "b" -> "".
Remove palindromic subsequence "baab" then "b".
Example 4:

Input: s = ""
Output: 0


Constraints:

0 <= s.length <= 1000
s only consists of letters 'a' and 'b'
   Hide Hint #1
Use the fact that string contains only 2 characters.
   Hide Hint #2
Are subsequences composed of only one type of letter always palindrome strings ?
"""


class Solution:
    def removePalindromeSub(self, s: str) -> int:
        # Solution 1 - 56 ms
        """
        if not s:

            # empty string
            # do nothing
            return 0

        elif s == s[::-1]:

            # s is palindrome itself
            # remove s and get empty string

            return 1

        else:

            # remove all 'a' on first pass
            # then remove all 'b' on second pass
            # finally, s will be empty string

            return 2
        """
        # Solution 2
        return 0 if s == "" else 1 if s == s[::-1] else 2


# Main Call
s = "baabb"
solution = Solution()
print(solution.removePalindromeSub(s))
